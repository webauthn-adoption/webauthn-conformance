import httpClient from "../../../helpers/HTTPClient.ts";
import { TestIdentifer } from "../../../helpers/types.ts";
import { asserts } from "../../../deps.ts";
import { assert } from "https://deno.land/std@0.65.0/testing/asserts.ts";

const { assertNotEquals, assert: assert2 } = asserts;

const attestationResponseResp1P1ID: TestIdentifer = {
  suite: "attestation",
  mode: "options",
  id: "AttestationResponseResp1P1",
};

/**
 * P-1
 * Get PublicKeyCredentialCreationOptions, generate a valid response(with for example packed
 * attestation). Get another one of PublicKeyCredentialCreationOptions for the same username as in
 * previous request, and check that it's have "excludeCredentials" field and:
 *         (a) it's of type Array
 *         (b) it's not empty
 *         (c) each member is of type PublicKeyCredentialDescriptor
 *         (d) it contains PublicKeyCredentialDescriptor, with "type" set to "public-key", and "id"
 *             set to base64url encoded credId from the previous registration
 */
async function attestationResponseResp1P1Test(): Promise<void> {
  const opts = {
    displayName: "Marcelle Ritchie",
    username: "GU7iv9rnWGMrvEpGqqEP",
    attestation: "direct",
  };

  const opts1 = await httpClient.postAttestationOptions(opts).then((resp) =>
    resp.json()
  );

  // TODO: This would probably need to be generated by a software authenticator, and use
  // opts1.challenge
  const attestationResponse = {
    "id": "aB_ymxxSgU-epadF2OkkjYq0fcWAJPNegsqzpGAQYVI",
    "rawId": "aB_ymxxSgU-epadF2OkkjYq0fcWAJPNegsqzpGAQYVI",
    "response": {
      "attestationObject": "o2NmbXRmcGFja2VkZ2F0dFN0bXSjY2FsZyZjc2lnWEYwRAIgU4vtr1ODnQ2N2NAZjT0NJ83D6v09RdpSynUqXEJg9LkCIBS0ZKghjtQTvQebaFtTVtGtogOCsgBJGWgD3zG8qLO3Y3g1Y4FZBEUwggRBMIICKaADAgECAgEBMA0GCSqGSIb3DQEBCwUAMIGhMRgwFgYDVQQDDA9GSURPMiBURVNUIFJPT1QxMTAvBgkqhkiG9w0BCQEWImNvbmZvcm1hbmNlLXRvb2xzQGZpZG9hbGxpYW5jZS5vcmcxFjAUBgNVBAoMDUZJRE8gQWxsaWFuY2UxDDAKBgNVBAsMA0NXRzELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk1ZMRIwEAYDVQQHDAlXYWtlZmllbGQwHhcNMTgwNTIzMTQzOTQzWhcNMjgwNTIwMTQzOTQzWjCBwjEjMCEGA1UEAwwaRklETzIgQkFUQ0ggS0VZIHByaW1lMjU2djExMTAvBgkqhkiG9w0BCQEWImNvbmZvcm1hbmNlLXRvb2xzQGZpZG9hbGxpYW5jZS5vcmcxFjAUBgNVBAoMDUZJRE8gQWxsaWFuY2UxIjAgBgNVBAsMGUF1dGhlbnRpY2F0b3IgQXR0ZXN0YXRpb24xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNWTESMBAGA1UEBwwJV2FrZWZpZWxkMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAETzpeXqtsH7yul_bfZEmWdix773IAQCp2xvIw9lVvF6qZm1l_xL9Qiq-OnvDNAT9aub0nkUvwgEN4y8yxG4m1RqMsMCowCQYDVR0TBAIwADAdBgNVHQ4EFgQUVk33wPjGVbahH2xNGfO_QeL9AXkwDQYJKoZIhvcNAQELBQADggIBAIfdoJ_4IIkF0S1Bzgmk6dR6XAYbDsPGcEyiQccGCvMnEOf0EVwXDEYvGsVXsR9h6FA04P7vg5Lx9lGBmI1_0QMYBiIeHT4Kyl8FZ3bTMIiOUJ0MFzKHCrc8snrkkL-iDcJP0AriS-SzgMj7TVFjE2_1LwnHWFo7WWBTnmEEivU_-nbVkqelwISE-MH9wgWscmovmIkZ9534teeL1K6rbg4eenjgyu_iHs4PZ6W7nJZ918Vv5EYbZNhREUgZgaKOyKLT3fDRkwE58FL7der8Osd5ltmus2RjjnmAkJnl5Xzc2u30n39QXRVkeX-HCdIBQL9ve03-XRmUL2Q9w3MkPTiXid0UEPYp19DYcZNfunJtYtnvIfYEze6LY6mJpxo7N3s4T3WsdgHa5nJDuN2DbnIX0zxAj00cz-K0KN0G8Bi3hAJPx1fqCZmIgZHYX9hdkCzJu0nXqmdSY4NVtbzSU9vPL49RBhfv2il4P27owGivOv2DTwSWlvUXcOBJ3xVIuWxHZA-WUqXgBwkMwg59kc5AY7Nq0xXuKkRVFrQvkWeMBakce9I1yyMPgK6XnraY7cyUjakLKj5RL6cjMbldmY567gNv8rD90Q86jbO0fCVTSoontEQGxu3reN1C2XAu6IsfCSmLCesA5l_Bssu71jPi0vV4mVB9-7BL8CiWzPscaGF1dGhEYXRhWKRJlg3liA6MaHQ0Fw9kdmBbj-SuuaKGMseZXPO6gx2XY0EAAABWMmrc8AzvRtCTkpjWxKhKcgAgaB_ymxxSgU-epadF2OkkjYq0fcWAJPNegsqzpGAQYVKlAQIDJiABIVggO9SIJ3iZv2nHeeVngjcN51nVIhR3lC31zAY0OdbJqe4iWCBS322_urhlYBi2jf_JMRShRyrbe9D97uXBaT6Nrekg7w",
      "clientDataJSON": "eyJvcmlnaW4iOiJodHRwOi8vbG9jYWxob3N0IiwiY2hhbGxlbmdlIjoid2s1Q2NzemoyTmhxdTZUel9lbmdzSU5rRnVILXhVRFFHeWEtNEppVkFlSSIsInR5cGUiOiJ3ZWJhdXRobi5jcmVhdGUifQ"
    },
    "type": "public-key"
  }

  const resp1 = await httpClient.postAttestationResponse(attestationResponse).then((resp) => resp.json());
  const credId = attestationResponse.id;

  const opts2 = await httpClient.postAttestationOptions(opts).then((resp) =>
    resp.json()
  );

  assertNotEquals(
    typeof opts2.excludeCredentials,
    undefined,
    'Response is missing "excludeCredentials" field!',
  );
  assert(
    Array.isArray(opts2.excludeCredentials),
    "Response.excludeCredentials is not of type Sequence!",
  );
  assert(
    opts2.excludeCredentials.length > 0,
    "Response.excludeCredentials is empty!",
  );

  for (let cred of opts2.excludeCredentials) {
    if (cred.id === credId) {
      return;
    }

    throw new Error(
      `ExcludeCredentials do not contain expected credential! Expected "${
        JSON.stringify(opts2.excludeCredentials)
      }" to include "${
        JSON.stringify({ "type": "public-key", "id": credId })
      }"!`,
    );
  }
}

export default {
  id: attestationResponseResp1P1ID,
  test: attestationResponseResp1P1Test,
};
